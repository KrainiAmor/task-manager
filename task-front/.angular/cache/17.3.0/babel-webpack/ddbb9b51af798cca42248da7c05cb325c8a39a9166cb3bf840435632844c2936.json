{"ast":null,"code":"import { signal } from '@angular/core';\nimport { tap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport 'zone.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/** Service des tâches (dev: proxy /api -> backend). */\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(http) {\n      this.http = http;\n      this.tasksSig = signal(null);\n      this.tasks = this.tasksSig.asReadonly();\n    }\n    loadAll(completed) {\n      const url = completed === undefined ? '/api/tasks' : `/api/tasks?completed=${completed}`;\n      return this.http.get(url).pipe(tap(ts => this.tasksSig.set(ts)), catchError(err => {\n        console.error('API error', err);\n        this.tasksSig.set([]);\n        return of([]);\n      })).subscribe();\n    }\n    get(id) {\n      return this.http.get(`/api/tasks/${id}`);\n    }\n    setCompleted(id, completed) {\n      return this.http.patch(`/api/tasks/${id}/status`, {\n        completed\n      }).pipe(tap(updated => {\n        const list = this.tasksSig() ?? [];\n        this.tasksSig.set(list.map(t => t.id === id ? updated : t));\n      }));\n    }\n    static {\n      this.ɵfac = function TaskService_Factory(t) {\n        return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TaskService,\n        factory: TaskService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}