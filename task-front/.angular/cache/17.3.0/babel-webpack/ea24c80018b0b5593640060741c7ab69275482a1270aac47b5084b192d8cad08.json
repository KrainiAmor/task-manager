{"ast":null,"code":"import { computed, signal } from '@angular/core';\nimport { NgFor, NgIf } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { MatListModule } from '@angular/material/list';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./task.service\";\nimport * as i2 from \"@angular/material/list\";\nimport * as i3 from \"@angular/material/chips\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nconst _c0 = a0 => [\"/tasks\", a0];\nfunction TaskListComponent_mat_nav_list_12_ng_container_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 8)(1, \"mat-icon\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 11);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const t_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(4, _c0, t_r2.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r2.completed ? \"check_circle\" : \"radio_button_unchecked\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r2.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r2.description);\n  }\n}\nfunction TaskListComponent_mat_nav_list_12_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskListComponent_mat_nav_list_12_ng_container_1_a_1_Template, 7, 6, \"a\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.filtered());\n  }\n}\nfunction TaskListComponent_mat_nav_list_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-nav-list\");\n    i0.ɵɵtemplate(1, TaskListComponent_mat_nav_list_12_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const empty_r4 = i0.ɵɵreference(16);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.filtered().length)(\"ngIfElse\", empty_r4);\n  }\n}\nfunction TaskListComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Chargement\\u2026\");\n  }\n}\nfunction TaskListComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Aucune t\\u00E2che \\u00E0 afficher.\");\n  }\n}\nexport let TaskListComponent = /*#__PURE__*/(() => {\n  class TaskListComponent {\n    constructor(svc) {\n      this.svc = svc;\n      this.filter = signal('all');\n      this.tasks = this.svc.tasks;\n      this.filtered = computed(() => {\n        const list = this.tasks();\n        if (!list) return [];\n        if (this.filter() === 'all') return list;\n        return list.filter(t => this.filter() === 'done' ? t.completed : !t.completed);\n      });\n    }\n    ngOnInit() {\n      this.svc.loadAll();\n    }\n    refresh() {\n      this.svc.loadAll(this.filter() === 'all' ? undefined : this.filter() === 'done');\n    }\n    onFilter(_) {\n      const idx = _.value ?? 0;\n      this.filter.set(idx === 0 ? 'all' : idx === 1 ? 'open' : 'done');\n      this.refresh();\n    }\n    static {\n      this.ɵfac = function TaskListComponent_Factory(t) {\n        return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskListComponent,\n        selectors: [[\"app-task-list\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 17,\n        vars: 5,\n        consts: [[\"loading\", \"\"], [\"empty\", \"\"], [2, \"display\", \"flex\", \"gap\", \"8px\", \"align-items\", \"center\", \"margin\", \"16px 0\"], [3, \"change\"], [3, \"selected\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"mat-list-item\", \"\", 3, \"routerLink\", 4, \"ngFor\", \"ngForOf\"], [\"mat-list-item\", \"\", 3, \"routerLink\"], [\"matListItemIcon\", \"\"], [\"matListItemTitle\", \"\"], [\"matListItemLine\", \"\"]],\n        template: function TaskListComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 2)(1, \"mat-chip-listbox\", 3);\n            i0.ɵɵlistener(\"change\", function TaskListComponent_Template_mat_chip_listbox_change_1_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onFilter($event));\n            });\n            i0.ɵɵelementStart(2, \"mat-chip-option\", 4);\n            i0.ɵɵtext(3, \"All\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"mat-chip-option\", 4);\n            i0.ɵɵtext(5, \"Open\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"mat-chip-option\", 4);\n            i0.ɵɵtext(7, \"Done\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(8, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_8_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.refresh());\n            });\n            i0.ɵɵelementStart(9, \"mat-icon\");\n            i0.ɵɵtext(10, \"refresh\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(11, \" Refresh\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(12, TaskListComponent_mat_nav_list_12_Template, 2, 2, \"mat-nav-list\", 6)(13, TaskListComponent_ng_template_13_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(15, TaskListComponent_ng_template_15_Template, 1, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n          }\n          if (rf & 2) {\n            const loading_r5 = i0.ɵɵreference(14);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"selected\", ctx.filter() === \"all\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"selected\", ctx.filter() === \"open\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"selected\", ctx.filter() === \"done\");\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.tasks())(\"ngIfElse\", loading_r5);\n          }\n        },\n        dependencies: [NgFor, NgIf, RouterLink, MatListModule, i2.MatNavList, i2.MatListItem, i2.MatListItemIcon, i2.MatListItemLine, i2.MatListItemTitle, MatChipsModule, i3.MatChipListbox, i3.MatChipOption, MatButtonModule, i4.MatButton, MatIconModule, i5.MatIcon],\n        encapsulation: 2\n      });\n    }\n  }\n  return TaskListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}